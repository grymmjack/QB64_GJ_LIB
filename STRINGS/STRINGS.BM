''
' GRYMMJACK'S STRINGS LIB
'
' Some commonly used functions that I missed in QB64 coming from PHP
'
' SUB/FUNCTION   NOTE
' str_implode$   Implodes a string array into a string using delimiter as glue
' str_explode    Explodes a string into an array of strings using a delimiter
' str_find_pos   Searches for strings in strings, fills array of found positions
' str_insert$    Insert a string into another string at position
' str_remove$    Remove a string from a string
' str_replace$   Replaces a string with another string inside a string
' str_slice_pos$ Returns part of a string from start pos. to end pos.
' 
' @author Rick Christy <grymmjack@gmail.com>
' @uses STRINGS.BI
'
$LET GJ_LIB_STRINGS_INC_BM = 1
$LET DEBUGGING = 1


''
' Implodes a string array into a string using delimiter as glue
' 
' @param arr$() Array to implode from
' @param delim$ Delimiter to glue the array parts together with
' @return STRING of array parts from the implosion
'
FUNCTION str_implode$ (arr$(), delim$)
    r$ = ""
    lb = LBOUND(arr$) : ub = UBOUND(arr$)
    FOR i = lb to ub
        IF i + 1 <= ub THEN
            r$ = r$ + arr$(i) + delim$
        ELSE
            r$ = r$ + arr$(i)
        END IF
    NEXT i
    str_implode$ = r$
END FUNCTION


''
' Explodes a string into an array of strings using a delimiter
'
' If the delimiter is not found, returns the target as dest$(0)
' 
' @param target$ String to explode
' @param delim$ Delimiter
' @param dest$() Array to explode into
' @param numParts% The number of strings in the array
'
SUB str_explode (target$, delim$, dest$(), numParts%)
    length = LEN(target$)
    delimLen = LEN(delim$)
    IF length = 0 THEN EXIT SUB
    DIM delimsPos%(length): numFound% = 0
    str_find_pos target$, delim$, delimsPos%(), numFound%
    IF numFound% > 0 THEN
        REDIM _PRESERVE delimsPos%(numFound% - 1)
    ELSE
        dest$(0) = target$
        numParts% = 0
        EXIT SUB
    END IF
    IF numFound% > 0 THEN
        IF numFound% = 1 THEN
            dest$(0) = LEFT$(target$, delimsPos%(0) - delimLen)
            dest$(1) = MID$(target$, delimsPos%(0) + delimLen)
            numParts% = 1
        END IF
        IF numFound% > 1 THEN
            dest$(0) = LEFT$(target$, delimsPos%(0) - delimLen)
            FOR i = 1 TO numFound%
                IF i + 1 <= numFound% THEN
                    dest$(i) = MID$( _
                        target$, _
                        delimsPos%(i - 1) + delimLen, _
                        delimsPos%(i) - delimsPos%(i - 1) - delimLen _
                    )
                END IF
            NEXT i
            dest$(numFound%) = MID$( _
                target$, delimsPos%(numFound% - 1) + delimLen _
            )
            numParts% = numFound%
        END IF
    END IF
END SUB


''
' Searches for strings inside of strings and fills array with found positions
'
' @param target$ String to search
' @param search$ String to search for in target
' @param arrFound% The array to populate with positions search found in target
' @param numFound% The number of times search found a match
'
SUB str_find_pos (target$, search$, arrFound%(), numFound%)
    length = LEN(target$): found = -1: x = 0: i = 0
    u = UBOUND(arrFound%)
    searchLen = LEN(search$)
    DO WHILE i <= length
        found = INSTR(i, target$, search$)
        IF found > 0 AND x <= u THEN
            arrFound%(x) = found
            i = found + searchLen
            x = x + 1
        ELSE
            i = i + 1
        END IF
    LOOP
    numFound% = x
END SUB


''
' Insert a string into another string at position
'
' @param s$ string to insert into
' @param ins$ string to insert
' @param p% position to insert
' @return STRING with insertion
'
FUNCTION str_insert$ (s$, ins$, p%)
    IF p% < LEN(s$) AND ins$ <> "" THEN
        IF p% = 0 THEN
            str_insert$ = ins$ + RIGHT$(s$, LEN(s$) + LEN(ins$)-1)
        ELSE
            str_insert$ = LEFT$(s$, p%+1) + ins$ + RIGHT$(s$, LEN(s$) - p%-1)
        END IF
    ELSE 
        str_insert$ = s$
    END IF
END FUNCTION


''
' Remove a string from a string
'
' @param s$ string to remove from
' @param del$ string to delete
' @param count% number of times to remove
' @return STRING with del$ removed
'
FUNCTION str_remove$ (s$, del$, count%)
    IF count% = -1 THEN
        DO 
            p% = INSTR(s$, del$)
            s$ = str_del$(s$, del$)
        LOOP UNTIL p% = 0
    ELSE
        DO 
            p% = INSTR(s$, del$)
            s$ = str_del$(s$, del$)
            count% = count% - 1
        LOOP UNTIL p% = 0 OR count% = 0
    END IF
    str_remove$ = s$
END FUNCTION


''
' Delete a string from a string once (helper for str_remove$)
'
' @param s$ string to delete from
' @param del$ string to delete
' @return STRING with del$ deleted
'
FUNCTION str_del$ (s$, del$)
    i% = INSTR(s$, del$)
    IF i% THEN 
        str_del$ = LEFT$(s$, i%-1) + RIGHT$(s$, LEN(s$) - (i% + LEN(del$))+1) 
    ELSE 
        str_del$ = s$
    END IF
END FUNCTION


''
' Replaces a string with another string inside a string
'
' @param s$ string to replace within
' @param search$ string to search for
' @param replace$ string to replace search with
' @param count% number of times to replace
' @return STRING with replacements
'
FUNCTION str_replace$ (s$, search$, replace$, count%)
    IF count% = -1 THEN
        DO 
            p% = INSTR(s$, search$)
            s$ = str_rep$(s$, search$, replace$)
        LOOP UNTIL p% = 0
    ELSE
        DO 
            p% = INSTR(s$, search$)
            s$ = str_rep$(s$, search$, replace$)
            count% = count% - 1
        LOOP UNTIL p% = 0 OR count% = 0
    END IF
    str_replace$ = s$
END FUNCTION


''
' Replaces a string with another string once (helper for str_replace$)
'
' @param s$ string to replace within
' @param search$ string to search for
' @param replace$ string to replace search with
' @return STRING with replacement
'
FUNCTION str_rep$ (s$, search$, replace$)
    p% = INSTR(s$, search$)
    IF p% THEN
        s$ = LEFT$(s$, p%-1) + RIGHT$(s$, LEN(s$) - p% - LEN(search$)+1)
        str_rep$ = LEFT$(s$, p%-1) + replace$ + RIGHT$(s$, LEN(s$) - p%+1)
    ELSE 
        str_rep$ = s$
    END IF
END FUNCTION


''
' Returns part of a string from start pos. to end pos.
' NOTE: This is different than MID$ as MID$ specifies a start and a length,
'       NOT an end position.
'
' @param s$ String to slice from
' @param startPos% Position to start slice from
' @param endPos% Position to end slice from
' @return STRING of sliced portion of original stright
'
FUNCTION str_slice_pos$ (s$, startPos%, endPos%)
    IF startPos% <= 0 THEN
        startPos% = 1
    END IF
    IF endPos% > 0 THEN
        str_slice_pos$ = MID$(s$, startPos%, endPos%-startPos%)
    ELSE
        str_slice_pos$ = MID$(s$, startPos%)
    END IF
END FUNCTION