''
' QB64_GJ_LIB
' GRYMMJACK'S PIPEPRINT LIB
'
' Pipe (|) Print emulates Mystic BBS pipe parsing
'
' USAGE:
'   Insert '$INCLUDE:'path_to_GJ_LIB/PIPEPRINT/PIPEPRINT.BI' at the top of file
'   Insert '$INCLUDE:'path_to_GJ_LIB/PIPEPRINT/PIPEPRINT.BM' at the bottom of file
' 
' @author Rick Christy <grymmjack@gmail.com>
' @uses PIPEPRINT.BI
' @uses DICT/DICT.BM
' @uses DUMP/DUMP.BM
' @uses ANSI/ANSI.BM
' @uses STRINGS/STRINGS.BM
'
$LET GJ_LIB_PIPEPRINT_INC_BM = 1



''
' PIPEPRINT returns ANSI codes (and can emulate ANSI through QB internals)
'
' @param s$ STRING to parse
' @param label$ STRING debug label
' @return STRING parsed with pipe codes replaced by ANSI codes
'
FUNCTION PIPEPRINT$ (s$, label$)
    l = LEN(s$)
    ' Reset the working variables
    NUM_PIPES_FOUND = 0 : REDIM PIPES_POSITIONS(MAX_PIPES) AS INTEGER
    ' Find the pipes
    str_find_pos s$, "|", PIPES_POSITIONS%(), NUM_PIPES_FOUND
    u = UBOUND(PIPES_POSITIONS)
    ' IF label$ = "PIPETEST_CURSORS_DELAY" THEN
    '     PRINT dump_integer_array(PIPES_POSITIONS%(), "PIPES_POSITIONS")
    '     sleep
    ' END IF
    IF NUM_PIPES_FOUND THEN
        PRINT "Found "; _TRIM$(STR$(NUM_PIPES_FOUND)); " pipes!"
        FOR i = 0 TO u
            char$ = MID$(s$, PIPES_POSITIONS(i), 1)
            i$    = _TRIM$(STR$(i))
            pos$  = _TRIM$(STR$(PIPES_POSITIONS(i)))
            PRINT "PIPE["; i$; "] = "; char$; " @ POS: "; pos$
        NEXT i
    END IF
    PIPEPRINT$ = ""
END FUNCTION



$IF GJ_LIB_DICT_INC_BM = UNDEFINED THEN
'$INCLUDE:'../DICT/DICT.BM'
$END IF
$IF GJ_LIB_DUMP_INC_BM = UNDEFINED THEN
'$INCLUDE:'../DUMP/DUMP.BM'
$END IF
$IF GJ_LIB_ANSI_INC_BM = UNDEFINED THEN
'$INCLUDE:'../ANSI/ANSI.BM'
$END IF
$IF GJ_LIB_STRINGS_INC_BM = UNDEFINED THEN
'$INCLUDE:'../STRINGS/STRINGS.BM'
$END IF
