''
' QB64_GJ_LIB
' GRYMMJACK'S ANSI LIB
'
' Support for ANSI.SYS and extended codes for terminal.
' 
' To emulate ANSI functionality using QB internals set this var to TRUE:
' GJ_LIB_ANSI_EMU = TRUE
' This variable can be toggled between TRUE and FALSE whenever needed, as many
' times as desired as it is not a CONST.
'
' NOTE: 
' There is a QB64 bug on MacOS/Linux where $CONSOLE:ONLY does not read input
' in the same way as on Windows. This bug is described here:
' https://github.com/QB64Official/qb64/issues/33
' 
' CURSOR MOVEMENT:
' FUNCTION               NOTES
' ansi_home$             Moves cursor to home position (0,0)
' ansi_locate$           Moves cursor to desired row and column
' ansi_move_up$          Moves cursor up n lines
' ansi_move_down$        Moves cursor down n lines
' ansi_move_right$       Moves cursor right n lines
' ansi_move_left$        Moves cursor left n lines
' ansi_move_lines_down$  Moves cursor to beginning of next line, n lines down
' ansi_move_lines_up$    Moves cursor to beginning of next line, n lines up
' ansi_move_column$      Moves cursor to column position n
' ansi_move_line_up$     Moves cursor one one line up, scrolling if needed
' ansi_save_pos$         Save cursor position
' ansi_restore_pos$      Restore cursor position
'
' ERASE:
' FUNCTION               NOTES
' ansi_erase_to_eos$     Erase from cursor to end of screen
' ansi_erase_to_bos$     Erase from cursor to beginning of screen
' ansi_erase_screen$     Erase entire screen
' ansi_erase_to_eol$     Erase from cursor to end of line
' ansi_erase_from_sol$   Erase from start of line to cursor
' ansi_erase_line$       Erase line
'
' MODES:
' FUNCTION                          NOTES
' ansi_mode_reset_all$              Reset all modes
' ansi_mode_bold$                   Set bold mode
' ansi_mode_bold_reset$             Reset bold mode
' ansi_mode_dim$                    Set dim mode
' ansi_mode_dim_reset$              Reset dim mode
' ansi_mode_italic$                 Set italic mode
' ansi_mode_italic_reset$           Reset italic mode
' ansi_mode_underline$              Set underline mode
' ansi_mode_underline_reset$        Reset underline mode
' ansi_mode_blinking$               Set blinking mode
' ansi_mode_blinking_reset$         Reset blinking mode
' ansi_mode_inverse$                Set inverse mode
' ansi_mode_inverse_reset$          Reset inverse mode
' ansi_mode_invisible$              Set invisible mode
' ansi_mode_invisible_reset$        Reset invisible mode
' ansi_mode_strikethrough$          Set strikethrough mode
' ansi_mode_strikethrough_reset$    Reset strikethrough mode
'
' STANDARD COLORS:
' FUNCTION                  NOTES
' ansi_fg_reset$            Reset foreground color
' ansi_bg_reset$            Reset background color
' ansi_fg_black$            Set foreground color to black
' ansi_fg_blue$             Set foreground color to blue
' ansi_fg_green$            Set foreground color to green
' ansi_fg_cyan$             Set foreground color to cyan
' ansi_fg_red$              Set foreground color to red
' ansi_fg_magenta$          Set foreground color to magenta
' ansi_fg_yellow$           Set foreground color to yellow
' ansi_fg_white$            Set foreground color to white
' ansi_fg_bright_black$     Set foreground color to black
' ansi_fg_bright_blue$      Set foreground color to blue
' ansi_fg_bright_green$     Set foreground color to green
' ansi_fg_bright_cyan$      Set foreground color to cyan
' ansi_fg_bright_red$       Set foreground color to red
' ansi_fg_bright_magenta$   Set foreground color to magenta
' ansi_fg_bright_yellow$    Set foreground color to yellow
' ansi_fg_bright_white$     Set foreground color to white
' ansi_bg_black$            Set background color to black
' ansi_bg_blue$             Set background color to blue
' ansi_bg_green$            Set background color to green
' ansi_bg_cyan$             Set background color to cyan
' ansi_bg_red$              Set background color to red
' ansi_bg_magenta$          Set background color to magenta
' ansi_bg_yellow$           Set background color to yellow
' ansi_bg_white$            Set background color to white
' ansi_bg_bright_black$     Set background color to black
' ansi_bg_bright_blue$      Set background color to blue
' ansi_bg_bright_green$     Set background color to green
' ansi_bg_bright_cyan$      Set background color to cyan
' ansi_bg_bright_red$       Set background color to red
' ansi_bg_bright_magenta$   Set background color to magenta
' ansi_bg_bright_yellow$    Set background color to yellow
' ansi_bg_bright_white$     Set background color to white
'
' 8-BIT (256) COLORS:
' FUNCTION      NOTES
' ansi_fg_256$  Sets text foreground color using 256 color mode
' ansi_bg_256$  Sets text background color using 256 color mode
' ansi_fg_rgb$  Sets text color foreground using RGB 8-bit mode
' ansi_bg_rgb$  Sets text color background using RGB 8-bit mode
'
' @author Rick Christy <grymmjack@gmail.com>
' @uses ANSI.BI
' @see https://gist.github.com/grymmjack/9dae29a60ea65f086d0b35df96fe2291
'
$LET GJ_LIB_ANSI_INC_BM = 1


''
' Moves cursor to home position (0,0)
'
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_home$ ()
    out$ = chr$(ANSI_ESC) + "[H"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE 1,1
    END IF
    ansi_home$ = out$
END FUNCTION


''
' Moves cursor to desired row and column
'
' @param row% Row to move cursor to
' @param col% Column to move cursor to
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_locate$ (row%, col%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(row%)) + ";"
    out$ = out$ + _TRIM$(STR$(col%))
    out$ = out$ + "H"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE row%, col%
    END IF
    ansi_locate$ = out$
END FUNCTION


''
' Moves cursor up n lines
'
' @param n% Number of lines to move cursor up
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_up$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "A"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN - n%, POS(0)
    END IF
    ansi_move_up$ = out$
END FUNCTION


''
' Moves cursor down n lines
'
' @param n% Number of lines to move cursor down
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_down$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "B"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN + n%, POS(0)
    END IF
    ansi_move_down$ = out$
END FUNCTION


''
' Moves cursor right n lines
'
' @param n% Number of lines to move cursor right
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_right$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "C"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN, POS(0) + n%
    END IF
    ansi_move_right$ = out$
END FUNCTION


''
' Moves cursor left n lines
'
' @param n% Number of lines to move cursor left
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_left$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "D"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN, POS(0) - n%
    END IF
    ansi_move_left$ = out$
END FUNCTION


''
' Moves cursor to beginning of next line, n lines down
'
' @param n% Number of lines to move cursor down
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_lines_down$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "E"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN + n%, POS(0)
    END IF
    ansi_move_lines_down$ = out$
END FUNCTION


''
' Moves cursor to beginning of previous line, n lines up
'
' @param n% Number of lines to move cursor up
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_lines_up$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "F"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN - n%, POS(0)
    END IF
    ansi_move_lines_up$ = out$
END FUNCTION


''
' Moves cursor to column position n
'
' @param n% Column to move cursor to
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_column$ (n%)
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "G"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN, n%
    END IF
    ansi_move_column$ = out$
END FUNCTION


''
' Moves cursor one line up, scrolling if needed
'
' @return string with ANSI escape codes to move cursor
FUNCTION ansi_move_line_up$ ()
    out$ = chr$(ANSI_ESC)
    out$ = out$ + "M"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE CSRLIN - n%, POS(0)
    END IF
    ansi_move_line_up$ = out$
END FUNCTION


''
' Save cursor position
'
' @return void
FUNCTION ansi_save_pos$ ()
    SHARED ansi_x%
    SHARED ansi_y%
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "s"
    IF GJ_LIB_ANSI_EMU THEN
        ansi_x% = POS(0)
        ansi_y% = CSRLIN
    END IF
    ansi_save_pos$ = out$
END FUNCTION


''
' Restore cursor position
'
' @return void
FUNCTION ansi_restore_pos$ ()
    SHARED ansi_x%
    SHARED ansi_y%
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "u"
    IF GJ_LIB_ANSI_EMU THEN
        LOCATE ansi_x%, ansi_y%
    END IF
    ansi_restore_pos$ = out$
END FUNCTION


''
' Erase from cursor to end of screen
'
' @return void
FUNCTION ansi_erase_to_eos$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "0"
    out$ = out$ + "J"
    ansi_erase_to_eos$ = out$
END FUNCTION


''
' Erase from cursor to beginning of screen
'
' @return void
FUNCTION ansi_erase_to_bos$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "1"
    out$ = out$ + "J"
    ansi_erase_to_bos$ = out$
END FUNCTION


''
' Erase entire screen
'
' @return void
FUNCTION ansi_erase_screen$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "2"
    out$ = out$ + "J"
    ansi_erase_screen$ = out$
END FUNCTION


''
' Erase from cursor to end of line
'
' @return void
FUNCTION ansi_erase_to_eol$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "0"
    out$ = out$ + "K"
    ansi_erase_to_eol$ = out$
END FUNCTION


''
' Erase from start of line to cursor
'
' @return void
FUNCTION ansi_erase_from_sol$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "1"
    out$ = out$ + "K"
    ansi_erase_from_sol$ = out$
END FUNCTION


''
' Erase line
'
' @return void
FUNCTION ansi_erase_line$ ()
    out$ = chr$(ANSI_ESC) + "["
    out$ = out$ + "2"
    out$ = out$ + "K"
    ansi_erase_line$ = out$
END FUNCTION


''
' Reset modes
'
' @return string with ANSI escape codes for resetting 1modes
FUNCTION ansi_mode_reset_all$ ()
    out$ = chr$(ANSI_ESC) + "[0m"
    ansi_mode_reset_all$ = out$
END FUNCTION


''
' Set bold mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_bold$ ()
    out$ = chr$(ANSI_ESC) + "[1m"
    ansi_mode_bold$ = out$
END FUNCTION


''
' Reset bold mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_bold_reset$ ()
    out$ = chr$(ANSI_ESC) + "[22m"
    ansi_mode_bold_reset$ = out$
END FUNCTION


''
' Set dim mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_dim$ ()
    out$ = chr$(ANSI_ESC) + "[2m"
    ansi_mode_dim$ = out$
END FUNCTION


''
' Reset dim mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_dim_reset$ ()
    out$ = chr$(ANSI_ESC) + "[22m"
    ansi_mode_dim_reset$ = out$
END FUNCTION


''
' Set italic mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_italic$ ()
    out$ = chr$(ANSI_ESC) + "[3m"
    ansi_mode_italic$ = out$
END FUNCTION


''
' Reset italic mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_italic_reset$ ()
    out$ = chr$(ANSI_ESC) + "[23m"
    ansi_mode_italic_reset$ = out$
END FUNCTION


''
' Set underline mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_underline$ ()
    out$ = chr$(ANSI_ESC) + "[4m"
    ansi_mode_underline$ = out$
END FUNCTION


''
' Reset underline mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_underline_reset$ ()
    out$ = chr$(ANSI_ESC) + "[24m"
    ansi_mode_underline_reset$ = out$
END FUNCTION


''
' Set blinking mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_blinking$ ()
    out$ = chr$(ANSI_ESC) + "[5m"
    ansi_mode_blinking$ = out$
END FUNCTION


''
' Reset blinking mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_blinking_reset$ ()
    out$ = chr$(ANSI_ESC) + "[25m"
    ansi_mode_blinking_reset$ = out$
END FUNCTION


''
' Set inverse mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_inverse$ ()
    out$ = chr$(ANSI_ESC) + "[7m"
    ansi_mode_inverse$ = out$
END FUNCTION


''
' Reset inverse mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_inverse_reset$ ()
    out$ = chr$(ANSI_ESC) + "[27m"
    ansi_mode_inverse_reset$ = out$
END FUNCTION


''
' Set invisible mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_invisible$ ()
    out$ = chr$(ANSI_ESC) + "[8m"
    ansi_mode_invisible$ = out$
END FUNCTION


''
' Reset invisible mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_invisible_reset$ ()
    out$ = chr$(ANSI_ESC) + "[28m"
    ansi_mode_invisible_reset$ = out$
END FUNCTION


''
' Set strikethrough mode
'
' @return string with ANSI escape codes for setting mode
FUNCTION ansi_mode_strikethrough$ ()
    out$ = chr$(ANSI_ESC) + "[9m"
    ansi_mode_strikethrough$ = out$
END FUNCTION


''
' Reset strikethrough mode
'
' @return string with ANSI escape codes for resetting mode
FUNCTION ansi_mode_strikethrough_reset$ ()
    out$ = chr$(ANSI_ESC) + "[29m"
    ansi_mode_strikethrough_reset$ = out$
END FUNCTION


''
' Reset foreground color
'
' @return string with ANSI escape codes for resetting foreground color
FUNCTION ansi_fg_reset$ ()
    out$ = chr$(ANSI_ESC) + "[0m"
    ansi_fg_reset$ = out$
END FUNCTION


''
' Reset background color
'
' @return string with ANSI escape codes for resetting background color
FUNCTION ansi_bg_reset$ ()
    out$ = chr$(ANSI_ESC) + "[0m"
    ansi_bg_reset$ = out$
END FUNCTION


''
' Set foreground color to black
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_black$ ()
    out$ = chr$(ANSI_ESC) + "[30m"
    ansi_fg_black$ = out$
END FUNCTION


''
' Set foreground color to bright black
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_black$ ()
    out$ = chr$(ANSI_ESC) + "[1;30m"
    ansi_fg_bright_black$ = out$
END FUNCTION


''
' Set background color to black
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_black$ ()
    out$ = chr$(ANSI_ESC) + "[40m"
    ansi_bg_black$ = out$
END FUNCTION


''
' Set background color to bright black
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_black$ ()
    out$ = chr$(ANSI_ESC) + "[1;40m"
    ansi_bg_bright_black$ = out$
END FUNCTION


''
' Set foreground color to blue
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_blue$ ()
    out$ = chr$(ANSI_ESC) + "[34m"
    ansi_fg_blue$ = out$
END FUNCTION


''
' Set foreground color to bright blue
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_blue$ ()
    out$ = chr$(ANSI_ESC) + "[1;34m"
    ansi_fg_bright_blue$ = out$
END FUNCTION


''
' Set background color to blue
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_blue$ ()
    out$ = chr$(ANSI_ESC) + "[44m"
    ansi_bg_blue$ = out$
END FUNCTION


''
' Set background color to bright blue
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_blue$ ()
    out$ = chr$(ANSI_ESC) + "[1;44m"
    ansi_bg_bright_blue$ = out$
END FUNCTION


''
' Set foreground color to green
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_green$ ()
    out$ = chr$(ANSI_ESC) + "[32m"
    ansi_fg_green$ = out$
END FUNCTION


''
' Set foreground color to bright green
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_green$ ()
    out$ = chr$(ANSI_ESC) + "[1;32m"
    ansi_fg_bright_green$ = out$
END FUNCTION

''
' Set background color to green
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_green$ ()
    out$ = chr$(ANSI_ESC) + "[42m"
    ansi_bg_green$ = out$
END FUNCTION


''
' Set background color to bright green
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_green$ ()
    out$ = chr$(ANSI_ESC) + "[1;42m"
    ansi_bg_bright_green$ = out$
END FUNCTION


''
' Set foreground color to cyan
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_cyan$ ()
    out$ = chr$(ANSI_ESC) + "[36m"
    ansi_fg_cyan$ = out$
END FUNCTION


''
' Set foreground color to bright_cyan
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_cyan$ ()
    out$ = chr$(ANSI_ESC) + "[1;36m"
    ansi_fg_bright_cyan$ = out$
END FUNCTION


''
' Set background color to cyan
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_cyan$ ()
    out$ = chr$(ANSI_ESC) + "[46m"
    ansi_bg_cyan$ = out$
END FUNCTION


''
' Set background color to bright cyan
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_cyan$ ()
    out$ = chr$(ANSI_ESC) + "[1;46m"
    ansi_bg_bright_cyan$ = out$
END FUNCTION


''
' Set foreground color to red
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_red$ ()
    out$ = chr$(ANSI_ESC) + "[31m"
    ansi_fg_red$ = out$
END FUNCTION


''
' Set foreground color to bright red
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_red$ ()
    out$ = chr$(ANSI_ESC) + "[1;31m"
    ansi_fg_bright_red$ = out$
END FUNCTION


''
' Set background color to red
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_red$ ()
    out$ = chr$(ANSI_ESC) + "[41m"
    ansi_bg_red$ = out$
END FUNCTION


''
' Set background color to bright red
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_red$ ()
    out$ = chr$(ANSI_ESC) + "[1;41m"
    ansi_bg_bright_red$ = out$
END FUNCTION


''
' Set foreground color to magenta
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_magenta$ ()
    out$ = chr$(ANSI_ESC) + "[35m"
    ansi_fg_magenta$ = out$
END FUNCTION


''
' Set foreground color to bright magenta
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_magenta$ ()
    out$ = chr$(ANSI_ESC) + "[1;35m"
    ansi_fg_bright_magenta$ = out$
END FUNCTION


''
' Set background color to magenta
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_magenta$ ()
    out$ = chr$(ANSI_ESC) + "[45m"
    ansi_bg_magenta$ = out$
END FUNCTION


''
' Set background color to bright magenta
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_magenta$ ()
    out$ = chr$(ANSI_ESC) + "[1;45m"
    ansi_bg_bright_magenta$ = out$
END FUNCTION


''
' Set foreground color to yellow
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_yellow$ ()
    out$ = chr$(ANSI_ESC) + "[33m"
    ansi_fg_yellow$ = out$
END FUNCTION


''
' Set foreground color to bright yellow
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_yellow$ ()
    out$ = chr$(ANSI_ESC) + "[1;33m"
    ansi_fg_bright_yellow$ = out$
END FUNCTION


''
' Set background color to yellow
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_yellow$ ()
    out$ = chr$(ANSI_ESC) + "[43m"
    ansi_bg_yellow$ = out$
END FUNCTION


''
' Set background color to bright yellow
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_yellow$ ()
    out$ = chr$(ANSI_ESC) + "[1;43m"
    ansi_bg_bright_yellow$ = out$
END FUNCTION


''
' Set foreground color to white
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_white$ ()
    out$ = chr$(ANSI_ESC) + "[37m"
    ansi_fg_white$ = out$
END FUNCTION


''
' Set foreground color to bright white
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_fg_bright_white$ ()
    out$ = chr$(ANSI_ESC) + "[1;37m"
    ansi_fg_bright_white$ = out$
END FUNCTION


''
' Set background color to white
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_white$ ()
    out$ = chr$(ANSI_ESC) + "[47m"
    ansi_bg_white$ = out$
END FUNCTION


''
' Set background color to bright white
'
' @return string with ANSI escape codes for setting color
FUNCTION ansi_bg_bright_white$ ()
    out$ = chr$(ANSI_ESC) + "[1;47m"
    ansi_bg_bright_white$ = out$
END FUNCTION


''
' Sets  text color foreground using 256 color mode
'
' @param r% Red value 0-255
' @param g% Green value 0-255
' @param b% Blue value 0-255
' @return string with ANSI escape codes for setting color
'
FUNCTION ansi_fg_256$ (c%)
    out$ = chr$(ANSI_ESC) + "[38;5"
    out$ = out$ + ";" + _TRIM$(STR$(c%))
    out$ = out$ + "m"
    ansi_fg_256$ = out$
END FUNCTION


''
' Sets  text color background using 256 color mode
'
' @param c% Color number (see link for color table)
' @return string with ANSI escape codes for setting color
'
FUNCTION ansi_bg_256$ (c%)
    out$ = chr$(ANSI_ESC) + "[48;5"
    out$ = out$ + ";" + _TRIM$(STR$(c%))
    out$ = out$ + "m"
    ansi_bg_256$ = out$
END FUNCTION


''
' Sets  text color foreground using RGB 8-bit mode
'
' @param r% Red value 0-255
' @param g% Green value 0-255
' @param b% Blue value 0-255
' @return string with ANSI escape codes for setting color
'
FUNCTION ansi_fg_rgb$ (r%, g%, b%)
    out$ = chr$(ANSI_ESC) + "[38;2"
    out$ = out$ + ";" + _TRIM$(STR$(r%))
    out$ = out$ + ";" + _TRIM$(STR$(g%))
    out$ = out$ + ";" + _TRIM$(STR$(b%))
    out$ = out$ + "m"
    ansi_fg_rgb$ = out$
END FUNCTION


''
' Sets  text color background using RGB 8-bit mode
'
' @param r% Red value 0-255
' @param g% Green value 0-255
' @param b% Blue value 0-255
' @return string with ANSI escape codes for setting color
'
FUNCTION ansi_bg_rgb$ (r%, g%, b%)
    out$ = chr$(ANSI_ESC) + "[48;2"
    out$ = out$ + ";" + _TRIM$(STR$(r%))
    out$ = out$ + ";" + _TRIM$(STR$(g%))
    out$ = out$ + ";" + _TRIM$(STR$(b%))
    out$ = out$ + "m"
    ansi_bg_rgb$ = out$
END FUNCTION
