''
' QB64_GJ_LIB
' GRYMMJACK'S DUMP LIB
'
' Dumps variables in a human friendly way to assist in debugging.
' Inspired by PHP print_r() [1] which I missed when writing in QB64.
'
' So, why "dump"?
'
' [0] dump: 
'       to copy (data in a computer's internal storage) to an external storage 
'       or output device
'          ^^^^^^^^^^^^^ 
'               this
'
' USAGE:
'   Insert '$INCLUDE:'path_to_GJ_LIB/DUMP/DUMP.BI' at the top of file
'   Insert '$INCLUDE:'path_to_GJ_LIB/DUMP/DUMP.BM' at the bottom of file
'
' TL;DR: 
'
' Every function returns a string called a dump block. The idea is that
' You can then PRINT the string in your code where you need to see what vars
' have inside them quickly.
'
' A dump block consists of:
' - A blank line
' - The type of variable being dumped
' - The number of elements in an array (if applicable)
' - A label for reference
'
' Here is an example of a dump of a string array:
'
' DIM words$(2)
' words$(0) = "foo" : words$(1) = "bar" : words$(2) = "baz"
' PRINT DUMP.string_array(words$(), "words")
' 
' OUTPUT:
' 
' STRING ARRAY: words$(2) {
'   (0): "foo" [3]
'   (1): "bar" [3]
'   (2): "baz" [3]
' }
' 
' Because QB64 lacks any reflection support, has no way to pass an optional
' argument, has no ability to identify a variable type, or even eval() it's
' own dialect, there are separate functions for each common type. If you don't
' see the one you need, it's easy enough to copy an existing one and make what
' you want while staying in the spirit of DUMP LIB.
' 
' FUNCTION              NOTES
' DUMP.bit_array$                     Returns string with a dump of an array of bits
' DUMP.unsigned_bit_array$            Returns string with a dump of an array of unsigned bits
' DUMP.byte_array$                    Returns string with a dump of an array of bytes
' DUMP.unsigned_byte_array$           Returns string with a dump of an array of unsigned bytes
' DUMP.unsigned_integer$              Returns string with a dump of an array of unsigned integers
' DUMP.unsigned_byte_array_as_hex$    Returns string with a dump of an array of unsigned bytes as hex
' DUMP.unsigned_byte_array_as_ascii$  Returns string with a dump of an array of unsigned bytes as hex and ASCII
' DUMP.string$                        Includes handy output of the strings length.
' DUMP.string_array$                  Works on 1 dimensional arrays only (right now).
' DUMP.integer_array$                 Works on 1 dimensional arrays only (right now).
' DUMP.single_array$                  Works on 1 dimensional arrays only (right now).
' DUMP.long_array$                    Works on 1 dimensional arrays only (right now).
' DUMP.double_array$                  Works on 1 dimensional arrays only (right now).
' DUMP.dict$                          Dump a dictionary object and it's contents.
'
' @author Rick Christy <grymmjack@gmail.com>
' @depends DUMP.BI
' @see [0] https://www.merriam-webster.com/dictionary/dump
' @see [1] https://www.php.net/manual/en/function.print-r.php
'
$INCLUDEONCE

''
' Returns string with a dump of a string
' 
' @param STRING s$ to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.string$(s$, label$)
    DIM AS STRING l, r
    l$ = _TRIM$(STR$(LEN(s$)))
    r$ = GJ_LIB_NL$ + "STRING: " + label$ + "$ {" + GJ_LIB_NL$
    r$ = r$ + "  " + CHR$(34) + s$ + CHR$(34) + " [" + l$ + "]" + GJ_LIB_NL$
    r$ = r$ + "} "
    DUMP.string$ = r$
END FUNCTION


''
' Returns string with a dump of an array of bits
'
' @param _BIT ARRAY arr`() of bits to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.bit_array$(arr`(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING t, r
    lb% = LBOUND(arr`) : ub% = UBOUND(arr`) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "STRING ARRAY: " + label$ + "`(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + STR$(arr`(i%))
        r$ = r$ + " [" + t$ + "]" + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.bit_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of unsigned bits
'
' @param _UNSIGNED _BIT arr~`() of unsigned bits to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.unsigned_bit_array$(arr~`(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING t, r
    lb% = LBOUND(arr~`) : ub% = UBOUND(arr~`) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "STRING ARRAY: " + label$ + "~`(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + STR$(arr~`(i%))
        r$ = r$ + " [" + t$ + "]" + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.unsigned_bit_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of strings
'
' @param STRING ARRAY arr$() of strings to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.string_array$(arr$(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING t, r
    lb% = LBOUND(arr$) : ub% = UBOUND(arr$) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "STRING ARRAY: " + label$ + "$(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + CHR$(34) + arr$(i%) + CHR$(34)
        r$ = r$ + " [" + _TRIM$(STR$(LEN(arr$(i%)))) + "]" + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.string_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of integers
'
' @param INTEGER ARRAY arr%() of integers to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.integer_array$(arr%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING t, r, num
    lb% = LBOUND(arr%) : ub% = UBOUND(arr%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "INTEGER ARRAY: " + label$ + "%(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        num$ = _TRIM$(STR$(arr%(i%)))
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + num$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.integer_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of unsigned integers
'
' @param _UNSIGNED INTEGER arr%() of unsigned integers to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.unsigned_integer_array$(arr~%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num
    lb% = LBOUND(arr~%) : ub% = UBOUND(arr~%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "INTEGER ARRAY: " + label$ + "~%(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        num$ = _TRIM$(STR$(arr~%(i%)))
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + num$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.unsigned_integer_array$ = r$
END FUNCTION


''
' Returns a string containing a dump of an array of singles
'
' @param SINGLE ARRAY arr!() of singles to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.single_array$(arr!(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num
    lb% = LBOUND(arr!) : ub% = UBOUND(arr!) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "SINGLE ARRAY: " + label$ + "!(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        num$ = _TRIM$(STR$(arr!(i%)))
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + num$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.single_array$ = r$
END FUNCTION


''
' Dumps an array of longs
'
' @param LONG ARRAY arr&() of longs to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.long_array$(arr&(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num
    lb% = LBOUND(arr&) : ub% = UBOUND(arr&) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "LONG ARRAY: " + label$ + "&(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        num$ = _TRIM$(STR$(arr&(i%)))
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + num$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.long_array$ = r$
END FUNCTION


''
' Dumps an array of doubles
'
' @param DOUBLE ARRAY arr#() of doubles to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.double_array$(arr#(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num
    lb% = LBOUND(arr#) : ub% = UBOUND(arr#) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "DOUBLE ARRAY: " + label$ + "#(" + t$ + ") {" + GJ_LIB_NL$
    FOR i% = lb% TO ub%
        num$ = _TRIM$(STR$(arr#(i%)))
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + "): " + num$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.double_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of bytes
'
' @param _BYTE ARRAY arr%%() of bytes to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.byte_array$(arr%%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num, si
    lb% = LBOUND(arr%%) : ub% = UBOUND(arr%%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "BYTE ARRAY: " + label$ + "%%(" + t$ + ") {"
    FOR i% = lb% TO ub%
        si$ = _TRIM$(STR$(i%))
        IF LEN(si$) = 1 THEN si$ = "0" + si$
        num$ = _TRIM$(STR$(arr%%(i%)))
        IF SGN(arr%%(i%)) = 1 THEN
            IF LEN(num$) = 2 THEN 
                num$ = " 0" + num$
            ELSEIF LEN(num$) = 1 THEN 
                num$ = " 00" + num$
            END IF
        ELSEIF SGN(arr%%(i%)) = 0 THEN
            num$ = " 000"
        ELSE
            IF LEN(num$) = 3 THEN
                num$ = "-0" + MID$(num$, 2, 2)
            ELSEIF LEN(num$) = 2 THEN
                num$ = "-00" + MID$(num$, 2, 1)
            END IF
        END IF
        IF i% MOD 8 = 0 THEN
            r$ = r$ + GJ_LIB_NL$
            r$ = r$ + STRING$(4, " ") + si$ + ": "
        END IF
        r$ = r$ + num$ + " "
    NEXT i%
    r$ = r$ + GJ_LIB_NL$ + "}"
    DUMP.byte_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of unsigned bytes
'
' @param _UNSIGNED _BYTE ARRAY arr~%%() of unsigned bytes to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.unsigned_byte_array$(arr~%%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num, si
    lb% = LBOUND(arr~%%) : ub% = UBOUND(arr~%%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "UNSIGNED BYTE ARRAY: " + label$ + "~%%(" + t$ + ") {"
    FOR i% = lb% TO ub%
        si$ = _TRIM$(STR$(i%))
        IF LEN(si$) = 1 THEN si$ = "0" + si$
        num$ = _TRIM$(STR$(arr~%%(i%)))
        IF LEN(num$) = 2 THEN 
            num$ = "0" + num$
        ELSEIF LEN(num$) = 1 THEN 
            num$ = "00" + num$
        END IF
        IF i% MOD 16 = 0 THEN
            r$ = r$ + GJ_LIB_NL$
            r$ = r$ + STRING$(4, " ") + si$ + ": "
        END IF
        r$ = r$ + num$ + " "
    NEXT i%
    r$ = r$ + GJ_LIB_NL$ + "}"
    DUMP.unsigned_byte_array$ = r$
END FUNCTION


''
' Returns string with a dump of an array of unsigned bytes as hex
'
' @param _UNSIGNED _BYTE ARRAY arr~%%() of unsigned bytes to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.unsigned_byte_array_as_hex$(arr~%%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num, si, h
    lb% = LBOUND(arr~%%) : ub% = UBOUND(arr~%%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "UNSIGNED BYTE ARRAY: " + label$ + "~%%(" + t$ + ") {"
    FOR i% = lb% TO ub%
        si$ = _TRIM$(STR$(i%))
        IF LEN(si$) = 1 THEN si$ = "0" + si$
        h$ = HEX$(arr~%%(i%))
        IF LEN(h$) = 1 THEN h$ = "0" + h$
        num$ = _TRIM$(STR$(arr~%%(i%)))
        IF i% MOD 16 = 0 THEN
            r$ = r$ + GJ_LIB_NL$
            r$ = r$ + STRING$(4, " ") + si$ + ": "
        END IF
        r$ = r$ + h$ + " "
    NEXT i%
    r$ = r$ + GJ_LIB_NL$ + "}"
    DUMP.unsigned_byte_array_as_hex$ = r$
END FUNCTION


''
' Returns string with a dump of an array of unsigned bytes as ascii
'
' @param _UNSIGNED _BYTE ARRAY arr~%%() of unsigned bytes to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.unsigned_byte_array_as_ascii$(arr~%%(), label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, num, si, h, c
    lb% = LBOUND(arr~%%) : ub% = UBOUND(arr~%%) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "UNSIGNED BYTE ARRAY: " + label$ + "~%%(" + t$ + ") {"
    FOR i% = lb% TO ub%
        si$ = _TRIM$(STR$(i%))
        DO WHILE LEN(si$) < LEN(STR$(ub%))-1
            si$ = "0" + si$
        LOOP
        h$ = HEX$(arr~%%(i%))
        IF LEN(h$) = 1 THEN h$ = "0" + h$
        num$ = _TRIM$(STR$(arr~%%(i%)))
        IF i% MOD 16 = 0 THEN
            r$ = r$ + GJ_LIB_NL$
            r$ = r$ + STRING$(4, " ") + si$ + ": "
        END IF
        r$ = r$ + h$ + " "
    NEXT i%
    r$ = r$ + GJ_LIB_NL$ + "ASCII:"
    FOR i% = lb% TO ub%
        si$ = _TRIM$(STR$(i%))
        DO WHILE LEN(si$) < LEN(STR$(ub%))-1
            si$ = "0" + si$
        LOOP
        IF arr~%%(i%) < 33 OR arr~%%(i%) > 254 THEN
            c$ = ".."
        ELSE
            c$ = CHR$(arr~%%(i%)) + " "
        END IF
        IF i% MOD 16 = 0 THEN
            r$ = r$ + GJ_LIB_NL$
            r$ = r$ + STRING$(4, " ") + si$ + ": "
        END IF
        r$ = r$ + c$ + " "
    NEXT i%
    r$ = r$ + GJ_LIB_NL$ + "}"
    DUMP.unsigned_byte_array_as_ascii$ = r$
END FUNCTION


''
' Dumps a dictionary object and its contents
'
' @param DICTIONARY d() object to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION DUMP.dict$(d() AS DICTIONARY, label$)
    DIM AS INTEGER lb, ub, i
    DIM AS STRING r, t, q, skey, sval
    lb% = LBOUND(d) : ub% = UBOUND(d) : t$ = _TRIM$(STR$(ub% - lb%))
    r$ = GJ_LIB_NL$ + "DICT: " + label$ + "(" + t$ + ") {" + GJ_LIB_NL$
    q$ = CHR$(34)
    FOR i% = lb% TO ub%
        skey$ = d(i%).key$
        sval$ = d(i%).val$
        r$ = r$ + "  (" + _TRIM$(STR$(i%)) + ") " + q$ + skey$ + q$
        r$ = r$ + ": " + q$ + sval$ + q$ + GJ_LIB_NL$
    NEXT i%
    r$ = r$ + "}"
    DUMP.dict$ = r$
END FUNCTION
