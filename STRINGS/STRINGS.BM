''
' GRYMMJACK'S STRINGS LIB
'
' Some commonly used functions that I missed in QB64 coming from PHP
' 
' @author Rick Christy <grymmjack@gmail.com>
' @uses STRINGS.BI
'
$LET GJ_LIB_STRINGS_INC_BM = 1
$LET DEBUGGING = 1


''
' Implodes a string array into a string using delimiter as glue
' 
' @param STRING ARRAY arr$() to implode from
' @param STRING delim$ Delimiter to glue the array parts together with
' @return STRING of array parts glued together with delimiter
'
FUNCTION STR.implode$(arr$(), delim$)
    DIM AS STRING res
    DIM AS INTEGER lb, ub, i
    res$ = ""
    lb% = LBOUND(arr$) : ub% = UBOUND(arr$)
    FOR i% = lb% TO ub%
        IF i% + 1 <= ub% THEN
            res$ = res$ + arr$(i) + delim$
        ELSE
            res$ = res$ + arr$(i)
        END IF
    NEXT i%
    STR.implode$ = res$
END FUNCTION


''
' Explodes a string into an array of strings using a delimiter
'
' If the delimiter is not found, returns the target as dest$(0)
' 
' @param STRING target$ to explode
' @param STRING delim$ delimiter
' @param STRING ARRAY dest$() to explode into
' @param INTEGER numParts% the number of strings in the array
'
SUB STR.explode(target$, delim$, dest$(), numParts%)
    DIM AS INTEGER length, delimLen, numFound, i
    length% = LEN(target$) : delimLen% = LEN(delim$) : numFound% = 0
    DIM delimsPos(length%) AS INTEGER
    IF length% = 0 THEN EXIT SUB

    CALL STR.find_pos(target$, delim$, delimsPos%(), numFound%)

    IF numFound% <= 0 THEN
        numParts% = 0
        dest$(0)  = target$
    ELSE
        REDIM _PRESERVE delimsPos%(numFound% - 1)
        IF numFound% = 1 THEN
            numParts% = 1
            dest$(0)  = LEFT$(target$, delimsPos%(0) - delimLen%)
            dest$(1)  = MID$(target$, delimsPos%(0) + delimLen%)
        ELSEIF numFound% > 1 THEN
            dest$(0) = LEFT$(target$, delimsPos%(0) - delimLen%)
            FOR i% = 1 TO numFound%
                IF i% + 1 <= numFound% THEN
                    dest$(i%) = MID$( _
                        target$, _
                        delimsPos%(i% - 1) + delimLen%, _
                        delimsPos%(i%) - delimsPos%(i% - 1) - delimLen% _
                    )
                END IF
            NEXT i%
            dest$(numFound%) = MID$( _
                target$, delimsPos%(numFound% - 1) + delimLen% _
            )
            numParts% = numFound%
        END IF
    END IF
END SUB


''
' Searches for strings inside of strings and fills array with found positions
'
' @param STRING target$ to search
' @param STRING search$ for in target
' @param INTEGER ARRAY arrFound%() populate with positions search found
' @param INTEGER numFound% times search found a match
'
SUB STR.find_pos(target$, search$, arrFound%(), numFound%)
    DIM AS INTEGER length, found, x, i, ub, searchLen
    length% = LEN(target$) : found% = -1 : x% = 0: i% = 0
    ub% = UBOUND(arrFound%)
    searchLen% = LEN(search$)
    DO WHILE i% <= length%
        found% = INSTR(i%, target$, search$)
        IF found% > 0 AND x% <= ub% THEN
            arrFound%(x%) = found%
            i% = found% + searchLen%
            x% = x% + 1
        ELSE
            i% = i% + 1
        END IF
    LOOP
    numFound% = x%
END SUB


''
' Insert a string into another string at position
'
' @param STRING s$ to insert into
' @param STRING ins$ insert
' @param INTEGER p% position to insert
' @return STRING with insertion
'
FUNCTION STR.insert$(s$, ins$, p%)
    IF p% < LEN(s$) AND ins$ <> "" THEN
        IF p% = 0 THEN
            STR.insert$ = ins$ + RIGHT$(s$, LEN(s$) + LEN(ins$) - 1)
        ELSE
            STR.insert$ = LEFT$(s$, p%+1) + ins$ + RIGHT$(s$, LEN(s$) - p%-1)
        END IF
    ELSE 
        STR.insert$ = s$
    END IF
END FUNCTION


''
' Remove a string from a string
'
' @param STRING s$ to remove from
' @param STRING del$ to delete
' @param INTEGER count% times to remove
' @return STRING with del$ removed
'
FUNCTION STR.remove$(s$, del$, count%)
    DIM AS INTEGER p
    IF count% = -1 THEN
        DO 
            p% = INSTR(s$, del$)
            s$ = STR.del$(s$, del$)
        LOOP UNTIL p% = 0
    ELSE
        DO 
            p% = INSTR(s$, del$)
            s$ = STR.del$(s$, del$)
            count% = count% - 1
        LOOP UNTIL p% = 0 OR count% = 0
    END IF
    STR.remove$ = s$
END FUNCTION


''
' Delete a string from a string once (helper for STR.remove$)
'
' @param STRING s$ to delete from
' @param STRING del$ to delete
' @return STRING with del$ deleted
'
FUNCTION STR.del$(s$, del$)
    DIM AS INTEGER i
    i% = INSTR(s$, del$)
    IF i% THEN 
        STR.del$ = LEFT$(s$, i%-1) + RIGHT$(s$, LEN(s$) - (i% + LEN(del$))+1) 
    ELSE 
        STR.del$ = s$
    END IF
END FUNCTION


''
' Replaces a string with another string inside a string
'
' @param STRING s$ to replace within
' @param STRING search$
' @param STRING replace$
' @param INTEGER count% number of times to replace
' @return STRING with replacements
'
FUNCTION STR.replace$(s$, search$, replace$, count%)
    DIM AS INTEGER p
    IF count% = -1 THEN
        DO 
            p% = INSTR(s$, search$)
            s$ = STR.rep$(s$, search$, replace$)
        LOOP UNTIL p% = 0
    ELSE
        DO 
            p% = INSTR(s$, search$)
            s$ = STR.rep$(s$, search$, replace$)
            count% = count% - 1
        LOOP UNTIL p% = 0 OR count% = 0
    END IF
    STR.replace$ = s$
END FUNCTION


''
' Reverses a string
' 
' @param STRING s$ to reverse
' @return STRING reversed string
'
FUNCTION STR.reverse$(s$)
    DIM AS INTEGER i, l
    DIM AS STRING res
    res$ = ""
    l% = LEN(s$)
    IF l% = 0 THEN EXIT FUNCTION
    FOR i% = l% TO 1 STEP -1
        res$ = res$ + CHR$(ASC(s$, i%))
    NEXT i%
    STR.reverse$ = res$
END FUNCTION


''
' Shuffles (randomizes) the characters in a string
' 
' @param STRING s$ string to reverse
' @return STRING shuffled string
'
FUNCTION STR.shuffle$(s$)
    DIM AS INTEGER r
    DIM AS STRING c, ls, rs, res
    IF LEN(s$) = 0 THEN EXIT FUNCTION
    RANDOMIZE TIMER
    DO
        r%   = INT(RND * LEN(s$) + 1) ' random pos in diminishing string
        c$   = MID$(s$, r%, 1)        ' random char at pos from diminishing string
        ls$  = MID$(s$, 1, r% - 1)    ' left side of diminishing string sans c$
        rs$  = MID$(s$, r% + 1)       ' right side of diminishing string sans c$
        s$   = ls$ + rs$              ' diminish the string (remove c$)
        res$ = res$ + c$              ' build the returned string
    LOOP UNTIL LEN(s$) = 0
    STR.shuffle$ = res$
END FUNCTION


''
' Pads both sides of a string with num% chars
'
' @param STRING s$ string to pad
' @param STRING char$ character to use for padding
' @param INTEGER num% number of characters to pad to
' @return STRING padded at the end
FUNCTION STR.pad_both$(s$, char$, num%)
    STR.pad_both$ = STR.pad_end$(STR.pad_start$(s$, char$, num%), char$, num%)
END FUNCTION


''
' Pads the end of a string with num% chars
'
' @param STRING s$ string to pad
' @param STRING char$ character to use for padding
' @param INTEGER num% number of characters to pad to
' @return STRING padded at the end
FUNCTION STR.pad_end$(s$, char$, num%)
    STR.pad_end$ = s$ + STRING$(num%, char$)
END FUNCTION


''
' Repeats a string num times
'
' @param STRING s$ string to repeat
' @param INTEGER num% number of times to repeat
' @return STRING repeated
FUNCTION STR.repeat$(s$, num%)
    DIM i AS INTEGER
    DIM res AS STRING
    res$ = ""
    FOR i% = 1 TO num%
        res$ = res$ + s$
    NEXT i%
    STR.repeat$ = res$
END FUNCTION


''
' Determines if a string starts with another string
'
' @param STRING s$ string to check
' @param INTEGER chars$ chars to check if string starts with
' @return INTEGER -1 if starts with 0 if not
FUNCTION STR.starts_with%(s$, chars$)
    STR.starts_with% = (LEFT$(s$, LEN(chars$)) = chars$)
END FUNCTION


''
' Determines if a string ends with another string
'
' @param STRING s$ string to check
' @param INTEGER chars$ chars to check if string ends with
' @return INTEGER -1 if ends with 0 if not
FUNCTION STR.ends_with%(s$, chars$)
    STR.ends_with% = (RIGHT$(s$, LEN(chars$)) = chars$)
END FUNCTION


''
' Pads the start of a string with num% chars
'
' @param STRING s$ string to pad
' @param STRING char$ character to use for padding
' @param INTEGER num% number of characters to pad to
' @return STRING padded at the end
FUNCTION STR.pad_start$(s$, char$, num%)
    STR.pad_start$ = STRING$(num%, char$) + s$
END FUNCTION


''
' Replaces a string with another string once (helper for STR.replace$)
'
' @param STRING s$ to replace within
' @param STRING search$
' @param STRING replace$
' @return STRING with replacement
'
FUNCTION STR.rep$(s$, search$, replace$)
    DIM AS INTEGER p
    p% = INSTR(s$, search$)
    IF p% THEN
        s$ = LEFT$(s$, p%-1) + RIGHT$(s$, LEN(s$) - p% - LEN(search$)+1)
        STR.rep$ = LEFT$(s$, p%-1) + replace$ + RIGHT$(s$, LEN(s$) - p%+1)
    ELSE 
        STR.rep$ = s$
    END IF
END FUNCTION


''
' Returns part of a string from start pos. to end pos.
' NOTE: This is different than MID$ as MID$ specifies a start and a length,
'       NOT an end position.
'
' @param STRING s$ to slice from
' @param INTEGER startPos% to start slice from
' @param INTEGER endPos% to end slice from
' @return STRING of sliced portion of original stright
'
FUNCTION STR.slice_pos$(s$, startPos%, endPos%)
    IF startPos% <= 0 THEN
        startPos% = 1
    END IF
    IF endPos% > 0 THEN
        STR.slice_pos$ = MID$(s$, startPos%, endPos%-startPos%)
    ELSE
        STR.slice_pos$ = MID$(s$, startPos%)
    END IF
END FUNCTION


''
' Returns a space trimmed _UNSIGNED _BYTE as a string
'
' @param _UNSIGNED _BYTE n~%% number to return
' @return STRING space trimmed number
'
FUNCTION STR.ub$(n~%%)
    STR.ub$ = _TRIM$(STR$(n~%%))
END FUNCTION


''
' Returns a space trimmed _UNSIGNED INTEGER as a string
'
' @param _UNSIGNED INTEGER n~% number to return
' @return STRING space trimmed number
'
FUNCTION STR.ui$(n~%)
    STR.ui$ = _TRIM$(STR$(n~%))
END FUNCTION


''
' Returns a space trimmed _UNSIGNED LONG as a string
'
' @param _UNSIGNED LONG n~& number to return
' @return STRING space trimmed number
'
FUNCTION STR.ul$(n~&)
    STR.ul$ = _TRIM$(STR$(n~&))
END FUNCTION


''
' Returns a space trimmed _BYTE as a string
'
' @param _BYTE n~% number to return
' @return STRING space trimmed number
'
FUNCTION STR.b$(n%%)
    STR.b$ = _TRIM$(STR$(n%%))
END FUNCTION


''
' Returns a space trimmed INTEGER as a string
'
' @param INTEGER n% number to return
' @return STRING space trimmed number
'
FUNCTION STR.i$(n%)
    STR.i$ = _TRIM$(STR$(n%))
END FUNCTION


''
' Returns a space trimmed LONG as a string
'
' @param LONG n& number to return
' @return STRING space trimmed number
'
FUNCTION STR.l$(n&)
    STR.l$ = _TRIM$(STR$(n&))
END FUNCTION


''
' Returns a space trimmed SINGLE as a string
'
' @param SINGLE n! number to return
' @return STRING space trimmed number
'
FUNCTION STR.s$(n!)
    STR.s$ = _TRIM$(STR$(n!))
END FUNCTION


''
' Returns a space trimmed DOUBLE as a string
'
' @param DOUBLE n& number to return
' @return STRING space trimmed number
'
FUNCTION STR.d$(n#)
    STR.d$ = _TRIM$(STR$(n#))
END FUNCTION


''
' Returns a space trimmed _FLOAT as a string
'
' @param _FLOAT n& number to return
' @return STRING space trimmed number
'
FUNCTION STR.f$(n##)
    STR.f$ = _TRIM$(STR$(n##))
END FUNCTION
