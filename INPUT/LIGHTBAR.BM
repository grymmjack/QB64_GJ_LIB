''
' QB64_GJ_LIB
' GRYMMJACK'S INPUT LIB - LIGHTBAR
'
' USAGE:
'   Insert '$INCLUDE:'path_to_GJ_LIB/INPUT/LIGHTBAR.BI' at the top of file
'   Insert '$INCLUDE:'path_to_GJ_LIB/INPUT/LIGHTBAR.BM' at the bottom of file
'
' @author Rick Christy <grymmjack@gmail.com>
' @uses LIGHTBAR.BI
'
$LET GJ_LIB_INPUT_LIGHTBAR_INC_BM = 1

''
' Render a LIGHTBAR menu
' @param LIGHTBAR menu UDT
' @param LIGHTBAR_OPTIONS o array to hold LIGHTBAR_OPTIONS
' @return integer choice made (-1 if abort with ESC)
'
FUNCTION LIGHTBAR%(menu AS LIGHTBAR, o() AS LIGHTBAR_OPTION)
    DIM AS INTEGER row, col,sel, lb, ub
    DIM AS INTEGER orig_fg, orig_bg

    ' Get lower and upper bounds of options array
    lb% = LBOUND(o) : ub% = UBOUND(o)

    ' Capture initial state for cursor and colors
    row% = CSRLIN : col% = POS(0) ' Store initial cursor position
    orig_fg% = SCREEN(row%, col%, 1) AND 15 ' Store initial foreground color
    orig_bg% = SCREEN(row%, col%, 1) \ 16   ' Store initial background color

    LIGHTBAR.get_options menu, o(), row%, col%, menu.opt_selected%
    LIGHTBAR.draw menu, o(), menu.opt_selected%
    sel% = LIGHTBAR.get_choice%(menu, o())

    ' Restore original colors
    COLOR orig_fg%, orig_bg% 

    ' Position cursor under menu
    IF menu.opt_vertical = 1 THEN
        LOCATE row% + (ub% - lb%) + 1, col% ' Vertical
    ELSE
        LOCATE o(ub%).row% + 1, col% ' Horizontal
    END IF

    LIGHTBAR% = sel%
END FUNCTION


''
' Get LIGHTBAR options as an array
' @param LIGHTBAR menu
' @param LIGHTBAR_OPTIONS array of LIGHTBAR_OPTIONS
' @param INTEGER row% the original row cursor was on
' @param INTEGER col% the original column cursor was on
' @param INTEGER sel% the selected menu item
'
SUB LIGHTBAR.get_options(menu AS LIGHTBAR, o() AS LIGHTBAR_OPTION, row%, col%, sel%)
    DIM AS INTEGER i, lb, ub, key_pos_s, key_pos_e
    DIM AS INTEGER cur_row, cur_col, w
    
    ' Get lower and upper bounds of options array
    lb% = LBOUND(o) : ub% = UBOUND(o)

    w% = menu.max_width% ' Get the max width for horiz menu
    cur_row% = row% : cur_col% = col% ' Init current row and current col

    FOR i% = lb% to ub%
        ' Extract hot key start and end positions
        key_pos_s% = INSTR(0, o(i%).txt, menu.delimeter$)
        key_pos_e% = INSTR(key_pos_s%, o(i%).txt, menu.delimeter$)

        ' Extract left and right part of option without key or delimeter
        o(i%).lft$ = MID$(o(i%).txt, 0, key_pos_s%)
        o(i%).rgt$ = MID$(o(i%).txt, key_pos_s% + 3)

        ' Capture hot key into arrays
        o(i%).key$ = MID$(o(i%).txt, key_pos_s% + 1, 1)

        ' Capture visible option length
        o(i%).len% = LEN(o(i%).lft$ + o(i%).key$ + o(i%).rgt$)

        ' Check if option is selected
        o(i%).sel% = 0
        IF i% = menu.opt_selected% THEN sel% = i% : o(i%).sel% = 1

        ' Calculate row and col positions for option
        IF menu.opt_vertical% = 1 THEN ' Vertical
            o(i%).row% = row% + i% ' In vert LIGHTBAR menu, 1 opt per row
            o(i%).col% = col%      ' In vert LIGHTBAR menu, column is same
        ELSE ' Horizontal
            IF cur_col% + o(i%).len% >= w% THEN ' Option WILL wrap
                o(i%).col%   = col%              ' Reset col to init col
                cur_col% = col% + o(i%).len%     ' Reset cur_col counter
                cur_row% = cur_row% + 1          ' Increment cur_row
                o(i%).row%   = cur_row%          ' Set row to cur_row
            ELSE ' Option will NOT wrap
                o(i%).col%   = cur_col%          ' Set col to current col
                o(i%).row%   = cur_row%          ' Set row to current row
                cur_col% = cur_col% + o(i%).len% ' Increment current col
            END IF
        END IF
    NEXT i%
END SUB


''
' Draws LIGHTBAR menu
' @param LIGHTBAR menu
' @param LIGHTBAR_OPTIONS array of LIGHTBAR_OPTIONS
' @param INTEGER sel% which option is selected
'
SUB LIGHTBAR.draw(menu AS LIGHTBAR, o() AS LIGHTBAR_OPTION, sel%)
    DIM AS INTEGER i, lb, ub
    DIM AS INTEGER fg, bg, kf, kb

    ' Get lower and upper bounds of options array
    lb% = LBOUND(o) : ub% = UBOUND(o)

    FOR i% = lb% TO ub% ' Walk the array of menu options
        LOCATE o(i%).row%, o(i%).col% ' Position the option
        IF i% = sel% THEN ' Selected colors
            fg% = menu.bar_fg_color% : bg% = menu.bar_bg_color%
            kf% = menu.bar_kf_color% : kb% = menu.bar_kb_color%
        ELSE ' Unselected colors
            fg% = menu.opt_fg_color% : bg% = menu.opt_bg_color%
            kf% = menu.key_fg_color% : kb% = menu.key_bg_color%
        END IF
        ' Draw the option
        COLOR fg%, bg% : PRINT o(i%).lft$; ' Draw opt left
        COLOR kf%, kb% : PRINT o(i%).key$; ' Draw opt hot key
        COLOR fg%, bg% : PRINT o(i%).rgt$; ' Draw opt right
    NEXT i%
END SUB


''
' Get choice from user in LIGHTBAR menu
' @param LIGHTBAR menu
' @param LIGHTBAR_OPTIONS array of LIGHTBAR_OPTIONS
' @return INTEGER choice user made (-1 = aborted)
'
FUNCTION LIGHTBAR.get_choice%(menu AS LIGHTBAR, o() AS LIGHTBAR_OPTION)
    DIM k AS STRING
    DIM AS INTEGER i, key_code, do_move, lb, ub, sel

    ' Get lower and upper bounds of options array
    lb% = LBOUND(o) : ub% = UBOUND(o)

    ' Define key constants
    CONST KEY_ESC   = 27
    CONST KEY_HOME  = 71 : CONST KEY_END   = 79
    CONST KEY_LEFT  = 75 : CONST KEY_RIGHT = 77
    CONST KEY_UP    = 72 : CONST KEY_DOWN  = 80
    CONST KEY_ENTER = 13

    DO:
        ' Init do_move which determines if we moved after all the SELECTs
        do_move% = 0 ' 1 = move, 2 = pick, 3 = abort
        _LIMIT 30
        k$ = INKEY$
        IF k$ <> "" THEN
            IF LEFT$(k$, 1) = CHR$(0) THEN ' Handle SPECIAL keys
                key_code% = ASC(RIGHT$(k$, 1)) ' Get char code sans CHR$(0)
                SELECT CASE key_code%
                    CASE KEY_HOME:
                        do_move% = 1
                        sel% = lb% 
                    CASE KEY_END:
                        do_move% = 1
                        sel% = ub%
                    CASE KEY_DOWN, KEY_RIGHT:
                        do_move% = 1
                        sel% = sel% + 1
                        IF sel% > ub% THEN sel% = lb%
                    CASE KEY_UP, KEY_LEFT:
                        do_move% = 1
                        sel% = sel% - 1
                        IF sel% < lb% THEN sel% = ub%
                END SELECT
            END IF

            FOR i% = lb% TO ub% ' Handle option hot keys
                IF LCASE$(k$) = LCASE$(o(i%).key$) THEN
                    do_move% = 2
                    sel% = i%
                END IF
            NEXT i%

            IF k$ = CHR$(KEY_ESC) THEN ' ESCAPE to abort
                do_move% = 3
            END IF
        END IF
        IF do_move% > 0 THEN
            ' Handle moves
            SELECT CASE do_move%
                CASE 1: ' move
                    LIGHTBAR.sound menu.use_sounds%, menu.snd_move_frq!, menu.snd_move_dur!, menu.snd_move_vol!
                    LIGHTBAR.draw menu, o(), sel%
                CASE 2: ' pick
                    LIGHTBAR.draw menu, o(), sel%
                CASE 3: ' abort
                    LIGHTBAR.sound menu.use_sounds%, menu.snd_abrt_frq!, menu.snd_abrt_dur!, menu.snd_abrt_vol!
                    LIGHTBAR.get_choice% = -1
                    EXIT FUNCTION
            END SELECT
        END IF
    LOOP UNTIL k$ = CHR$(KEY_ENTER) OR k$ = CHR$(KEY_ESC) OR do_move% = 2
    LIGHTBAR.sound menu.use_sounds%, menu.snd_pick_frq!, menu.snd_pick_dur!, menu.snd_pick_vol!
    LIGHTBAR.get_choice% = sel%
END FUNCTION


''
' Handles LIGHTBAR sounds
' @param INTEGER use_sounds% 0 = no, 1 = yes
' @param SINGLE frq frequency for sound
' @param SINGLE dur duration of sound
' @param SINGLE vol volume of sound
'
SUB LIGHTBAR.sound(use_sounds%, frq!, dur!, vol!)
    IF use_sounds% = 1 THEN
        SOUND frq!, dur!, vol!
    END IF
END SUB