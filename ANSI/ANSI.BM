''
' QB64_GJ_LIB
' GRYMMJACK'S ANSI LIB
'
' Support for ANSI.SYS and extended codes for terminal.
' 
' To emulate ANSI functionality using QB internals set this var to TRUE:
' GJ_LIB_ANSI_EMU = TRUE
' This variable can be toggled between TRUE and FALSE whenever needed, as many
' times as desired as it is not a CONST.
'
' NOTE: 
' There is a QB64 bug on MacOS/Linux where $CONSOLE:ONLY does not read input
' in the same way as on Windows. This bug is described here:
' https://github.com/QB64Official/qb64/issues/33
'
' @author Rick Christy <grymmjack@gmail.com>
' @uses ANSI.BI
' @see https://gist.github.com/grymmjack/9dae29a60ea65f086d0b35df96fe2291
'

''
' Clamps a value from going below 0
'
' @param INTEGER var% to clamp to zero
' @return INTEGER var clamped to 0 or more
' 
FUNCTION ANSI.clamp_zero%(var%)
    IF var% < 0 THEN
        ANSI.clamp_zero% = 0
    ELSE
        ANSI.clamp_zero% = var%
    END IF
END FUNCTION


''
' Safely locates within ranges 1+ on row and col
'
' @param INTEGER row% for locate
' @param INTEGER col% for locate
'
SUB ANSI.safe_locate(row%, col%)
    IF row% <= 0 THEN row% = 1
    IF col% <= 0 THEN col% = 1
    LOCATE row%, col%
END SUB


''
' Safely locates within ranges 1+ on col
'
' @param INTEGER col% for locate
'
SUB ANSI.safe_locate_x(col%)
    IF col% <= 0 THEN col% = 1
    LOCATE , col%
END SUB


''
' Safely locates within ranges 1+ on row
'
' @param INTEGER row% for locate
'
SUB ANSI.safe_locate_y(row%)
    IF row% <= 0 THEN row% = 1
    LOCATE row%
END SUB


''
' Hides cursor
'
' @return STRING with ANSI escape codes to hide cursor
'
FUNCTION ANSI.hide_cursor$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[?25l"
    IF GJ_LIB_ANSI_EMU THEN LOCATE ,,0
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.hide_cursor$ = sout$
END FUNCTION


''
' Shows cursor
'
' @return STRING with ANSI escape codes to show cursor
'
FUNCTION ANSI.show_cursor$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[?25h"
    IF GJ_LIB_ANSI_EMU THEN LOCATE ,,1
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.show_cursor$ = sout$
END FUNCTION


''
' Moves cursor to home position (0,0)
'
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.home$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[H"
    ANSI.x% = 0 : ANSI.y% = 0
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.home$ = sout$
END FUNCTION


''
' Moves cursor to desired row and column
'
' @param INTEGER row% to move cursor to
' @param INTEGER col% to move cursor to
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.locate$(row%, col%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(row%)) + ";"
    sout$ = sout$ + _TRIM$(STR$(col%)) + "H"
    ANSI.x% = col% : ANSI.y% = row%
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.locate$ = sout$
END FUNCTION


''
' Moves cursor up n lines
'
' @param INTEGER n% Number of lines to move cursor up
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_up$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[" 
    sout$ = sout$ + _TRIM$(STR$(n%)) + "A"
    ANSI.y% = ANSI.clamp_zero(ANSI.y% - n%)
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_y(ANSI.y%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_up$ = sout$
END FUNCTION


''
' Moves cursor down n lines
'
' @param INTEGER n% Number of lines to move cursor down
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_down$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "B"
    ANSI.y% = ANSI.y% + n%
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_y(ANSI.y%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_down$ = sout$
END FUNCTION


''
' Moves cursor right n lines
'
' @param INTEGER n% Number of lines to move cursor right
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_right$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "C"
    ANSI.x% = ANSI.x% + n%
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_x(ANSI.x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_right$ = sout$
END FUNCTION


''
' Moves cursor left n lines
'
' @param INTEGER n% Number of lines to move cursor left
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_left$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "D"
    ANSI.x% = ANSI.clamp_zero(ANSI.x% - n%)
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_x(ANSI.x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_left$ = sout$
END FUNCTION


''
' Moves cursor to beginning of next line, n lines down
'
' @param INTEGER n% Number of lines to move cursor down
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_lines_down$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "E"
    ANSI.y% = ANSI.y% + n%
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_y(ANSI.y%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_lines_down$ = sout$
END FUNCTION


''
' Moves cursor to beginning of previous line, n lines up
'
' @param INTEGER n% Number of lines to move cursor up
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_lines_up$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "F"
    ANSI.y% = ANSI.clamp_zero(ANSI.y% - n%)
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_y(ANSI.y%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_lines_up$ = sout$
END FUNCTION


''
' Moves cursor to column position n
'
' @param INTEGER n% Column to move cursor to
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_column$(n%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "["
    sout$ = sout$ + _TRIM$(STR$(n%)) + "G"
    ANSI.x% = n%
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_x(ANSI.x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_column$ = sout$
END FUNCTION


''
' Moves cursor one line up, scrolling if needed
'
' @return STRING with ANSI escape codes to move cursor
'
FUNCTION ANSI.move_line_up$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "M"
    ANSI.y% = ANSI.clamp_zero(ANSI.y% - 1)
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate_y(ANSI.y%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.move_line_up$ = sout$
END FUNCTION


''
' Save cursor position
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.save_pos$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[s"
    ANSI.save_x% = ANSI.x% : ANSI.save_y% = ANSI.y%
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.save_pos$ = sout$
END FUNCTION


''
' Restore cursor position
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.restore_pos$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[u"
    nil$ = ANSI.locate(ANSI.save_y%, ANSI.save_x%)
    IF GJ_LIB_ANSI_EMU THEN CALL ANSI.safe_locate(ANSI.save_y%, ANSI.save_x%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.restore_pos$ = sout$
END FUNCTION


''
' Erase from cursor to end of screen
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_to_eos$()
    DIM AS STRING sout
    DIM AS INTEGER w, h, x, y, row
    sout$ = CHR$(ANSI.ESC) + "[0J"
    IF GJ_LIB_ANSI_EMU THEN
        w = _WIDTH
        h = _HEIGHT
        x = ANSI.x%
        y = ANSI.y%
        PRINT SPC(w-x)
        FOR row = y TO h
            LOCATE row, 1
            PRINT SPC(w)
        NEXT row
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_to_eos$ = sout$
END FUNCTION


''
' Erase from cursor to beginning of screen
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_to_bos$()
    DIM AS STRING sout
    DIM AS INTEGER w, h, row
    sout$ = CHR$(ANSI.ESC) + "[1J"
    IF GJ_LIB_ANSI_EMU THEN
        w = _WIDTH
        h = _HEIGHT
        LOCATE ,1
        PRINT SPC(ANSI.x%-1)
        FOR row = h TO 1 STEP - 1
            LOCATE row, 1
            PRINT SPC(w)
        NEXT row
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_to_bos$ = sout$
END FUNCTION


''
' Erase entire screen
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_screen$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[2J"
    sout$ = sout$ + ANSI.locate(1,1)
    ANSI.x% = 0 : ANSI.y% = 0
    IF GJ_LIB_ANSI_EMU THEN 
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
        CLS
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_screen$ = sout$
END FUNCTION


''
' Erase from cursor to end of line
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_to_eol$()
    DIM AS STRING sout
    DIM AS INTEGER w
    sout$ = CHR$(ANSI.ESC) + "[0K"
    IF GJ_LIB_ANSI_EMU THEN
        w = _WIDTH
        PRINT SPC(w-ANSI.x%)
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_to_eol$ = sout$
END FUNCTION


''
' Erase from start of line to cursor
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_from_sol$()
    DIM AS STRING sout
    DIM AS INTEGER w
    sout$ = CHR$(ANSI.ESC) + "[1K"
    IF GJ_LIB_ANSI_EMU THEN
        w = _WIDTH
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
        PRINT SPC(w-ANSI.x%)
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_from_sol$ = sout$
END FUNCTION


''
' Erase line
'
' @return STRING with ANSI escape codes 
'
FUNCTION ANSI.erase_line$()
    DIM AS STRING sout
    DIM AS INTEGER w, x, y
    sout$ = CHR$(ANSI.ESC) + "[2K"
    IF GJ_LIB_ANSI_EMU THEN
        w = _WIDTH
        x = ANSI.x%
        y = ANSI.y%
        LOCATE ,1
        PRINT SPC(w)
        CALL ANSI.safe_locate(ANSI.y%, ANSI.x%)
    END IF    
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.erase_line$ = sout$
END FUNCTION


''
' Reset modes
'
' @return STRING with ANSI escape codes for resetting 1modes
'
FUNCTION ANSI.mode_reset_all$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0m"
    IF GJ_LIB_ANSI_EMU THEN
        ANSI.fg_color& = 7 : ANSI.bg_color& = 0
        COLOR ANSI.fg_color&, ANSI.bg_color&
        _BLINK ON
    END IF    
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_reset_all$ = sout$
END FUNCTION


''
' Set bold mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_bold$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[1m"
    IF GJ_LIB_ANSI_EMU THEN
        IF ANSI.fg_color& <= 7 THEN ANSI.fg_color& = ANSI.fg_color& + 8
        COLOR ANSI.fg_color&
    END IF    
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_bold$ = sout$
END FUNCTION


''
' Reset bold mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_bold_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[22m"
    IF GJ_LIB_ANSI_EMU THEN
        IF ANSI.fg_color& >= 8 THEN ANSI.fg_color& = ANSI.fg_color& - 8
        COLOR ANSI.fg_color&
    END IF    
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_bold_reset$ = sout$
END FUNCTION


''
' Set dim mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_dim$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[2m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold_reset
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_dim$ = sout$
END FUNCTION


''
' Reset dim mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_dim_reset$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[22m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold_reset
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_dim_reset$ = sout$
END FUNCTION


''
' Set italic mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_italic$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[3m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_italic$ = sout$
END FUNCTION


''
' Reset italic mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_italic_reset$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[23m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold_reset
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_italic_reset$ = sout$
END FUNCTION


''
' Set underline mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_underline$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[4m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_underline$ = sout$
END FUNCTION


''
' Reset underline mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_underline_reset$()
    DIM AS STRING sout, nil
    sout$ = CHR$(ANSI.ESC) + "[24m"
    IF GJ_LIB_ANSI_EMU THEN nil$ = ANSI.mode_bold_reset
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_underline_reset$ = sout$
END FUNCTION


''
' Set blinking mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_blinking$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[5m"
    IF GJ_LIB_ANSI_EMU THEN _BLINK ON
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_blinking$ = sout$
END FUNCTION


''
' Reset blinking mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_blinking_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[25m"
    IF GJ_LIB_ANSI_EMU THEN _BLINK OFF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_blinking_reset$ = sout$
END FUNCTION


''
' Set inverse mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_inverse$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[?5h"
    sout$ = sout$ + CHR$(ANSI.ESC) + "[7m"
    IF GJ_LIB_ANSI_EMU THEN 
        ANSI.old_fg_color& = ANSI.fg_color&
        ANSI.old_bg_color& = ANSI.bg_color&
        ANSI.fg_color& = ANSI.bg_color&
        ANSI.bg_color& = ANSI.old_fg_color&
        COLOR ANSI.fg_color&, ANSI.bg_color&
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_inverse$ = sout$
END FUNCTION


''
' Reset inverse mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_inverse_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[?5l"
    sout$ = sout$ + CHR$(ANSI.ESC) + "[27m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ANSI.old_fg_color&, ANSI.old_bg_color&
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_inverse_reset$ = sout$
END FUNCTION


''
' Set invisible mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_invisible$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[8m"
    IF GJ_LIB_ANSI_EMU THEN 
        ANSI.old_fg_color& = ANSI.fg_color&
        ANSI.old_bg_color& = ANSI.bg_color&
        ANSI.fg_color& = ANSI.bg_color&
        COLOR ANSI.fg_color&, ANSI.bg_color&
    END IF
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_invisible$ = sout$
END FUNCTION


''
' Reset invisible mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_invisible_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[28m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ANSI.old_fg_color&, ANSI.old_bg_color&
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_invisible_reset$ = sout$
END FUNCTION


''
' Set strikethrough mode
'
' @return STRING with ANSI escape codes for setting mode
'
FUNCTION ANSI.mode_strikethrough$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[9m"
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_strikethrough$ = sout$
END FUNCTION


''
' Reset strikethrough mode
'
' @return STRING with ANSI escape codes for resetting mode
'
FUNCTION ANSI.mode_strikethrough_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[29m"
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.mode_strikethrough_reset$ = sout$
END FUNCTION


''
' Reset foreground color
'
' @return STRING with ANSI escape codes for resetting foreground color
'
FUNCTION ANSI.fg_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 7
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_reset$ = sout$
END FUNCTION


''
' Reset background color
'
' @return STRING with ANSI escape codes for resetting background color
'
FUNCTION ANSI.bg_reset$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,0
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_reset$ = sout$
END FUNCTION


''
' Set foreground color to black
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_black$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[30m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 0
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_black$ = sout$
END FUNCTION


''
' Set foreground color to bright black
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_black$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[30;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 8
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_black$ = sout$
END FUNCTION


''
' Set background color to black
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_black$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;40m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,0
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_black$ = sout$
END FUNCTION


''
' Set background color to bright black
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_black$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[100;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,8
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_black$ = sout$
END FUNCTION


''
' Set foreground color to blue
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_blue$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;34m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 1
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_blue$ = sout$
END FUNCTION


''
' Set foreground color to bright blue
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_blue$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[34;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 9
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_blue$ = sout$
END FUNCTION


''
' Set background color to blue
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_blue$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[44m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,1
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_blue$ = sout$
END FUNCTION


''
' Set background color to bright blue
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_blue$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[104;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,9
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_blue$ = sout$
END FUNCTION


''
' Set foreground color to green
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_green$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;32m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 2
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_green$ = sout$
END FUNCTION


''
' Set foreground color to bright green
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_green$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[32;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 10
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_green$ = sout$
END FUNCTION

''
' Set background color to green
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_green$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[42m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,2
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_green$ = sout$
END FUNCTION


''
' Set background color to bright green
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_green$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[102;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,10
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_green$ = sout$
END FUNCTION


''
' Set foreground color to cyan
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_cyan$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;36m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 3
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_cyan$ = sout$
END FUNCTION


''
' Set foreground color to bright_cyan
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_cyan$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[36;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 11
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_cyan$ = sout$
END FUNCTION


''
' Set background color to cyan
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_cyan$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[46m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,3
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_cyan$ = sout$
END FUNCTION


''
' Set background color to bright cyan
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_cyan$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[106;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,11
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_cyan$ = sout$
END FUNCTION


''
' Set foreground color to red
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_red$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;31m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 4
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_red$ = sout$
END FUNCTION


''
' Set foreground color to bright red
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_red$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[31;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 12
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_red$ = sout$
END FUNCTION


''
' Set background color to red
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_red$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[41m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,4
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_red$ = sout$
END FUNCTION


''
' Set background color to bright red
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_red$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[101;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,12
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_red$ = sout$
END FUNCTION


''
' Set foreground color to magenta
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_magenta$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;35m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 5
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_magenta$ = sout$
END FUNCTION


''
' Set foreground color to bright magenta
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_magenta$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[35;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 13
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_magenta$ = sout$
END FUNCTION


''
' Set background color to magenta
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_magenta$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[45m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,5
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_magenta$ = sout$
END FUNCTION


''
' Set background color to bright magenta
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_magenta$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[105;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,13
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_magenta$ = sout$
END FUNCTION


''
' Set foreground color to yellow
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_yellow$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;33m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 6
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_yellow$ = sout$
END FUNCTION


''
' Set foreground color to bright yellow
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_yellow$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[33;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 14
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_yellow$ = sout$
END FUNCTION


''
' Set background color to yellow
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_yellow$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[43m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,6
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_yellow$ = sout$
END FUNCTION


''
' Set background color to bright yellow
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_yellow$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[103;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,14
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_yellow$ = sout$
END FUNCTION


''
' Set foreground color to white
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_white$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[0;37m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 7
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_white$ = sout$
END FUNCTION


''
' Set foreground color to bright white
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_bright_white$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[37;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR 15
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_bright_white$ = sout$
END FUNCTION


''
' Set background color to white
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_white$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[47m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,7
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_white$ = sout$
END FUNCTION


''
' Set background color to bright white
'
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_bright_white$()
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[107;1m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ,15
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_bright_white$ = sout$
END FUNCTION


''
' Sets text color foreground using 256 color mode
'
' @param INTEGER c% Color number (see link for color table)
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_256$(c%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[38;5"
    sout$ = sout$ + ";" + _TRIM$(STR$(c%))
    sout$ = sout$ + "m"
    IF GJ_LIB_ANSI_EMU THEN COLOR c%, ANSI.bg_color&
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_256$ = sout$
END FUNCTION


''
' Sets text color background using 256 color mode
'
' @param INTEGER c% Color number (see link for color table)
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_256$(c%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[48;5"
    sout$ = sout$ + ";" + _TRIM$(STR$(c%))
    sout$ = sout$ + "m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ANSI.fg_color& ,c%
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_256$ = sout$
END FUNCTION


''
' Sets text color foreground using RGB 8-bit mode
'
' @param INTEGER r% Red value 0-255
' @param INTEGER g% Green value 0-255
' @param INTEGER b% Blue value 0-255
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.fg_rgb$(r%, g%, b%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[38;2"
    sout$ = sout$ + ";" + _TRIM$(STR$(r%))
    sout$ = sout$ + ";" + _TRIM$(STR$(g%))
    sout$ = sout$ + ";" + _TRIM$(STR$(b%))
    sout$ = sout$ + "m"
    IF GJ_LIB_ANSI_EMU THEN COLOR _RGB(r%, g%, b%), ANSI.bg_color&
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.fg_rgb$ = sout$
END FUNCTION


''
' Sets text color background using RGB 8-bit mode
'
' @param INTEGER r% Red value 0-255
' @param INTEGER g% Green value 0-255
' @param INTEGER b% Blue value 0-255
' @return STRING with ANSI escape codes for setting color
'
FUNCTION ANSI.bg_rgb$(r%, g%, b%)
    DIM AS STRING sout
    sout$ = CHR$(ANSI.ESC) + "[48;2"
    sout$ = sout$ + ";" + _TRIM$(STR$(r%))
    sout$ = sout$ + ";" + _TRIM$(STR$(g%))
    sout$ = sout$ + ";" + _TRIM$(STR$(b%))
    sout$ = sout$ + "m"
    IF GJ_LIB_ANSI_EMU THEN COLOR ANSI.fg_color& ,_RGB(r%, g%, b%)
    IF GJ_LIB_ANSI_OUTPUT THEN ANSI.bg_rgb$ = sout$
END FUNCTION
