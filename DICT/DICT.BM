''
' QB64_GJ_LIB
' GRYMMJACK'S DICTIONARY Object (part of _GJ_LIB)
'
' Simulates a dictionary object as found in other languages.
'
' USAGE FOR Dict Object alone:
'   Insert '$INCLUDE:'path_to_GJ_LIB/DICT/DICT.BI' at the top of file
'   Insert '$INCLUDE:'path_to_GJ_LIB/DICT/DICT.BM' at the bottom of file
'
' @author Rick Christy <grymmjack@gmail.com>
' @uses DICT.BI
'
$INCLUDEONCE
'$INCLUDE:'DICT.BI'


''
' Populates a dictionary with arrays of keys and values
'
' @param DICTIONARY d() object to populate
' @param STRING ARRAY keys$() keys to use for dict keys
' @param STRING ARRAY vals$() vals to use for dict vals
' @return Nothing, but the d() passed is populated by keys and values
'
SUB DICT.populate(d() AS DICTIONARY, keys$(), vals$())
    DIM AS INTEGER uk, uv, i
    uk% = UBOUND(keys$) : uv% = UBOUND(vals$)
    IF uk% <> uv% THEN EXIT SUB
    FOR i% = 0 TO uk%
        d(i%).key$ = keys$(i)
        d(i%).val$ = vals$(i)
    NEXT i
END SUB


''
' Fills a dictionary with serialized keys and values
'
' @param DICTIONARY d() object to fill
' @return Nothing, but the d() passed in is filled
'
SUB DICT.fill(d() AS DICTIONARY)
    DIM AS INTEGER ub, lb, i
    ub% = UBOUND(d) : lb% = LBOUND(d)
    FOR i% = lb% TO ub%
        d(i%).key$ = "key" + _TRIM$(STR$(i%))
        d(i%).val$ = _TRIM$(STR$(i%))
    NEXT i
END SUB


''
' Gets a dictionary array index by key
'
' @param DICTIONARY d() to look in
' @param STRING ARRAY key$ to find the index for
' @return INTEGER array index if found or 0 if not found
'
FUNCTION DICT.get_index_by_key%(d() AS DICTIONARY, key$)
    DIM AS INTEGER ub, lb, i
    ub% = UBOUND(d) : lb% = LBOUND(d)
    FOR i% = lb% TO ub%
        IF d(i%).key$ = key$ THEN
            DICT.get_index_by_key% = i%
            EXIT FUNCTION
        END IF
    NEXT i%
    DICT.get_index_by_key% = 0
END FUNCTION


''
' Gets a dictionary items key by its array index
'
' @param DICTIONARY d() to look in
' @param INTEGER index% to lookup the key for
' @return STRING key of item at index
' 
FUNCTION DICT.get_key_by_index$(d() AS DICTIONARY, index%)
    DIM AS INTEGER ub, lb
    ub% = UBOUND(d) : lb% = LBOUND(d)
    IF index% >= lb% AND index% <= ub% THEN
        DICT.get_key_by_index$ = d(index%).key$
    END IF
END FUNCTION


''
' Gets a dictionary items value by its array index
' 
' @param DICTIONARY d() to look in
' @param INTEGER index% to lookup the value for
' @return STRING value of item at index
'
FUNCTION DICT.get_val_by_index$(d() AS DICTIONARY, index%)
    DIM AS INTEGER ub, lb
    ub% = UBOUND(d) : lb% = LBOUND(d)
    IF index% >= lb% AND index% <= ub% THEN
        DICT.get_val_by_index$ = d(index%).val$
    END IF
END FUNCTION


''
' Gets a dictionary items value by its key
'
' @param DICTIONARY d() to look in
' @param STRING key$ to get the value for
' @return STRING value of dictionary item by key
'
FUNCTION DICT.get_val_by_key$(d() AS DICTIONARY, key$)
    DIM AS INTEGER ub, lb, i
    ub% = UBOUND(d) : lb% = LBOUND(d)
    FOR i% = lb% TO ub%
        IF d(i%).key$ = key$ THEN
            DICT.get_val_by_key$ = d(i%).val$
            EXIT FUNCTION
        END IF
    NEXT i%
END FUNCTION


''
' Get all dictionary object keys as an array of strings
'
' @param DICTIONARY d() to look in
' @param STRING ARRAY keys$() to store dict object keys into
' @return Nothing, but the keys$() array is populated
'
SUB DICT.get_keys(d() AS DICTIONARY, keys$())
    DIM AS INTEGER ub, lb, i, c
    ub = UBOUND(d) : lb = LBOUND(d) : c% = ub% - lb%
    REDIM keys$(c%)
    FOR i% = lb% TO ub%
        keys$(i%) = d(i%).key$
    NEXT i%
END SUB


''
' Get all dictionary object values as an array of strings
'
' @param DICTIONARY d() to look in
' @param STRING ARRAY vals$() to store dict object vals into
' @return Nothing, but the vals$() array is populated
'
SUB DICT.get_vals(d() AS DICTIONARY, vals$())
    DIM AS INTEGER ub, lb, i, c
    ub = UBOUND(d) : lb = LBOUND(d) : c% = ub% - lb%
    REDIM vals$(c%)
    FOR i% = lb% TO ub%
        vals$(i%) = d(i%).val$
    NEXT i%
END SUB


''
' Swaps a dictionary objects keys for its values
'
' @param DICTIONARY d() to operate on
' @return Nothing, but the dict() passed in is operated on directly
'
SUB DICT.swap_keys_for_vals(d() AS DICTIONARY)
    DIM AS INTEGER ub, lb, i, c
    ub = UBOUND(d) : lb = LBOUND(d) : c% = ub% - lb%
    DIM res(c%) AS DICTIONARY
    FOR i% = lb% TO ub%
        res(i%).key$ = d(i%).val$
        res(i%).val$ = d(i%).key$
        SWAP d(i%).key$, res(i%).key$
        SWAP d(i%).val$, res(i%).val$
    NEXT i%
END SUB
